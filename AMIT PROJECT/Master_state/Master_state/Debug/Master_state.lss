
Master_state.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000a48  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000f2  008000f2  00000b6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002110  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c80  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001224  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00004db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f13  00000000  00000000  00005877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000678a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	df 02       	muls	r29, r31
  56:	ff 02       	muls	r31, r31
  58:	21 03       	mulsu	r18, r17
  5a:	44 03       	mulsu	r20, r20
  5c:	67 03       	mulsu	r22, r23
  5e:	89 03       	fmulsu	r16, r17
  60:	c3 03       	fmuls	r20, r19
  62:	f2 03       	fmuls	r23, r18
  64:	14 04       	cpc	r1, r4
  66:	4c 04       	cpc	r4, r12

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3f       	cpi	r26, 0xF2	; 242
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a2 ef       	ldi	r26, 0xF2	; 242
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3f       	cpi	r26, 0xF9	; 249
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
  9e:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include "ADC.h"
/*Functions implementations*/
void ADC_Init(Uint8t channel)/*Initialize ADC*/
{
	/*Choose voltage source - AVCC*/
	CLR_BIT(ADMUX, REFS1);SET_BIT(ADMUX, REFS0);
  a6:	3f 98       	cbi	0x07, 7	; 7
  a8:	3e 9a       	sbi	0x07, 6	; 7
	/*Choose right adjust*/
	CLR_BIT(ADMUX, ADLAR);
  aa:	3d 98       	cbi	0x07, 5	; 7
	/*Choose channel*/
	switch(channel)
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	b9 f0       	breq	.+46     	; 0xde <ADC_Init+0x38>
  b0:	28 f4       	brcc	.+10     	; 0xbc <ADC_Init+0x16>
  b2:	88 23       	and	r24, r24
  b4:	41 f0       	breq	.+16     	; 0xc6 <ADC_Init+0x20>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	61 f0       	breq	.+24     	; 0xd2 <ADC_Init+0x2c>
  ba:	22 c0       	rjmp	.+68     	; 0x100 <ADC_Init+0x5a>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	a9 f0       	breq	.+42     	; 0xea <ADC_Init+0x44>
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	c9 f0       	breq	.+50     	; 0xf6 <ADC_Init+0x50>
  c4:	1d c0       	rjmp	.+58     	; 0x100 <ADC_Init+0x5a>
	{
		case ADC0:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);
  c6:	3c 98       	cbi	0x07, 4	; 7
  c8:	3b 98       	cbi	0x07, 3	; 7
  ca:	3a 98       	cbi	0x07, 2	; 7
  cc:	39 98       	cbi	0x07, 1	; 7
  ce:	38 98       	cbi	0x07, 0	; 7
		break;
  d0:	17 c0       	rjmp	.+46     	; 0x100 <ADC_Init+0x5a>
		case ADC1:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);
  d2:	3c 98       	cbi	0x07, 4	; 7
  d4:	3b 98       	cbi	0x07, 3	; 7
  d6:	3a 98       	cbi	0x07, 2	; 7
  d8:	39 98       	cbi	0x07, 1	; 7
  da:	38 9a       	sbi	0x07, 0	; 7
		break;
  dc:	11 c0       	rjmp	.+34     	; 0x100 <ADC_Init+0x5a>
		case ADC2:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);
  de:	3c 98       	cbi	0x07, 4	; 7
  e0:	3b 98       	cbi	0x07, 3	; 7
  e2:	3a 98       	cbi	0x07, 2	; 7
  e4:	39 9a       	sbi	0x07, 1	; 7
  e6:	38 98       	cbi	0x07, 0	; 7
		break;
  e8:	0b c0       	rjmp	.+22     	; 0x100 <ADC_Init+0x5a>
		case ADC3:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);
  ea:	3c 98       	cbi	0x07, 4	; 7
  ec:	3b 98       	cbi	0x07, 3	; 7
  ee:	3a 98       	cbi	0x07, 2	; 7
  f0:	39 9a       	sbi	0x07, 1	; 7
  f2:	38 9a       	sbi	0x07, 0	; 7
		break;
  f4:	05 c0       	rjmp	.+10     	; 0x100 <ADC_Init+0x5a>
		case ADC4:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);SET_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);
  f6:	3c 98       	cbi	0x07, 4	; 7
  f8:	3b 98       	cbi	0x07, 3	; 7
  fa:	3a 9a       	sbi	0x07, 2	; 7
  fc:	39 98       	cbi	0x07, 1	; 7
  fe:	38 98       	cbi	0x07, 0	; 7
	ADMUX |= (1 << 1) | (1 << 0);//Choose channel 3
	*/
	/*Use auto trigger mode*/
	//SET_BIT(ADCSRA, ADATE);
	/*Choose Prescaler*/
	SET_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
 100:	32 9a       	sbi	0x06, 2	; 6
 102:	31 9a       	sbi	0x06, 1	; 6
 104:	30 9a       	sbi	0x06, 0	; 6
	/*ADC Enable*/
	SET_BIT(ADCSRA,ADIE);
 106:	33 9a       	sbi	0x06, 3	; 6
	SET_BIT(ADCSRA, ADEN);
 108:	37 9a       	sbi	0x06, 7	; 6
	sei();
 10a:	78 94       	sei
	SET_BIT(ADCSRA,ADSC);
 10c:	36 9a       	sbi	0x06, 6	; 6
 10e:	08 95       	ret

00000110 <ADC_Read>:
}
Uint16t ADC_Read(void)/*Read value of current ADC*/
{
	Uint16t var = 0;
	/*Start of conversion signal - SOC*/
	SET_BIT(ADCSRA, ADSC);
 110:	36 9a       	sbi	0x06, 6	; 6
	/*Wait till flag is set automatically - EOC*/
	//while (GET_BIT(ADCSRA, ADIF) != 1);/*Polling mode*/
	/*Return value*/
	var = ADC;
 112:	84 b1       	in	r24, 0x04	; 4
 114:	95 b1       	in	r25, 0x05	; 5
	return var;
 116:	08 95       	ret

00000118 <DIO_SetPin_Direction>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 118:	44 23       	and	r20, r20
 11a:	19 f0       	breq	.+6      	; 0x122 <DIO_SetPin_Direction+0xa>
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	c9 f1       	breq	.+114    	; 0x192 <DIO_SetPin_Direction+0x7a>
 120:	08 95       	ret
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	91 f0       	breq	.+36     	; 0x14a <DIO_SetPin_Direction+0x32>
 126:	28 f0       	brcs	.+10     	; 0x132 <DIO_SetPin_Direction+0x1a>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	d9 f0       	breq	.+54     	; 0x162 <DIO_SetPin_Direction+0x4a>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	29 f1       	breq	.+74     	; 0x17a <DIO_SetPin_Direction+0x62>
 130:	08 95       	ret
 132:	2a b3       	in	r18, 0x1a	; 26
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0x26>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0x22>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	8a bb       	out	0x1a, r24	; 26
 148:	08 95       	ret
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPin_Direction+0x3e>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPin_Direction+0x3a>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	87 bb       	out	0x17, r24	; 23
 160:	08 95       	ret
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_SetPin_Direction+0x56>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_SetPin_Direction+0x52>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
 178:	08 95       	ret
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_SetPin_Direction+0x6e>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_SetPin_Direction+0x6a>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	81 bb       	out	0x11, r24	; 17
 190:	08 95       	ret
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	89 f0       	breq	.+34     	; 0x1b8 <DIO_SetPin_Direction+0xa0>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_SetPin_Direction+0x8a>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	c9 f0       	breq	.+50     	; 0x1ce <DIO_SetPin_Direction+0xb6>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	11 f1       	breq	.+68     	; 0x1e4 <DIO_SetPin_Direction+0xcc>
 1a0:	08 95       	ret
 1a2:	2a b3       	in	r18, 0x1a	; 26
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPin_Direction+0x96>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPin_Direction+0x92>
 1b2:	82 2b       	or	r24, r18
 1b4:	8a bb       	out	0x1a, r24	; 26
 1b6:	08 95       	ret
 1b8:	27 b3       	in	r18, 0x17	; 23
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPin_Direction+0xac>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPin_Direction+0xa8>
 1c8:	82 2b       	or	r24, r18
 1ca:	87 bb       	out	0x17, r24	; 23
 1cc:	08 95       	ret
 1ce:	24 b3       	in	r18, 0x14	; 20
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPin_Direction+0xc2>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPin_Direction+0xbe>
 1de:	82 2b       	or	r24, r18
 1e0:	84 bb       	out	0x14, r24	; 20
 1e2:	08 95       	ret
 1e4:	21 b3       	in	r18, 0x11	; 17
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPin_Direction+0xd8>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPin_Direction+0xd4>
 1f4:	82 2b       	or	r24, r18
 1f6:	81 bb       	out	0x11, r24	; 17
 1f8:	08 95       	ret

000001fa <DIO_SetPin_Value>:
 1fa:	44 23       	and	r20, r20
 1fc:	19 f0       	breq	.+6      	; 0x204 <DIO_SetPin_Value+0xa>
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	c9 f1       	breq	.+114    	; 0x274 <DIO_SetPin_Value+0x7a>
 202:	08 95       	ret
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 f0       	breq	.+36     	; 0x22c <DIO_SetPin_Value+0x32>
 208:	28 f0       	brcs	.+10     	; 0x214 <DIO_SetPin_Value+0x1a>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	d9 f0       	breq	.+54     	; 0x244 <DIO_SetPin_Value+0x4a>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	29 f1       	breq	.+74     	; 0x25c <DIO_SetPin_Value+0x62>
 212:	08 95       	ret
 214:	2b b3       	in	r18, 0x1b	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0x26>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0x22>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPin_Value+0x3e>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPin_Value+0x3a>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_SetPin_Value+0x56>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_SetPin_Value+0x52>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
 25a:	08 95       	ret
 25c:	22 b3       	in	r18, 0x12	; 18
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_SetPin_Value+0x6e>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_SetPin_Value+0x6a>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	82 bb       	out	0x12, r24	; 18
 272:	08 95       	ret
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	89 f0       	breq	.+34     	; 0x29a <DIO_SetPin_Value+0xa0>
 278:	28 f0       	brcs	.+10     	; 0x284 <DIO_SetPin_Value+0x8a>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	c9 f0       	breq	.+50     	; 0x2b0 <DIO_SetPin_Value+0xb6>
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	11 f1       	breq	.+68     	; 0x2c6 <DIO_SetPin_Value+0xcc>
 282:	08 95       	ret
 284:	2b b3       	in	r18, 0x1b	; 27
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPin_Value+0x96>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPin_Value+0x92>
 294:	82 2b       	or	r24, r18
 296:	8b bb       	out	0x1b, r24	; 27
 298:	08 95       	ret
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPin_Value+0xac>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPin_Value+0xa8>
 2aa:	82 2b       	or	r24, r18
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	08 95       	ret
 2b0:	25 b3       	in	r18, 0x15	; 21
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPin_Value+0xc2>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPin_Value+0xbe>
 2c0:	82 2b       	or	r24, r18
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	08 95       	ret
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPin_Value+0xd8>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPin_Value+0xd4>
 2d6:	82 2b       	or	r24, r18
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	08 95       	ret

000002dc <DIO_ReadPin_Value>:
	}
}
Uint8t DIO_ReadPin_Value(Uint8t port, Uint8t pin)
{
	Uint8t val = 0;
	switch(port)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	79 f0       	breq	.+30     	; 0x2fe <DIO_ReadPin_Value+0x22>
 2e0:	28 f0       	brcs	.+10     	; 0x2ec <DIO_ReadPin_Value+0x10>
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	a9 f0       	breq	.+42     	; 0x310 <DIO_ReadPin_Value+0x34>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	e1 f0       	breq	.+56     	; 0x322 <DIO_ReadPin_Value+0x46>
 2ea:	24 c0       	rjmp	.+72     	; 0x334 <DIO_ReadPin_Value+0x58>
	{
		case DIO_PORTA:
		val = GET_BIT(PINA, pin);
 2ec:	89 b3       	in	r24, 0x19	; 25
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_ReadPin_Value+0x1a>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_ReadPin_Value+0x16>
 2fa:	81 70       	andi	r24, 0x01	; 1
		break;
 2fc:	08 95       	ret
		case DIO_PORTB:
		val = GET_BIT(PINB, pin);
 2fe:	86 b3       	in	r24, 0x16	; 22
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_ReadPin_Value+0x2c>
 304:	95 95       	asr	r25
 306:	87 95       	ror	r24
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_ReadPin_Value+0x28>
 30c:	81 70       	andi	r24, 0x01	; 1
		break;
 30e:	08 95       	ret
		case DIO_PORTC:
		val = GET_BIT(PINC, pin);
 310:	83 b3       	in	r24, 0x13	; 19
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_ReadPin_Value+0x3e>
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_ReadPin_Value+0x3a>
 31e:	81 70       	andi	r24, 0x01	; 1
		break;
 320:	08 95       	ret
		case DIO_PORTD:
		val = GET_BIT(PIND, pin);
 322:	80 b3       	in	r24, 0x10	; 16
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_ReadPin_Value+0x50>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_ReadPin_Value+0x4c>
 330:	81 70       	andi	r24, 0x01	; 1
		break;
 332:	08 95       	ret
		break;
	}
}
Uint8t DIO_ReadPin_Value(Uint8t port, Uint8t pin)
{
	Uint8t val = 0;
 334:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		val = GET_BIT(PIND, pin);
		break;
	}
	return val;
}
 336:	08 95       	ret

00000338 <BUTTON0_Initialize>:
 *  Author: karim
 */ 
#include "InOut.h"
 void BUTTON0_Initialize()
 {
	 DIO_SetPin_Direction(BUTTON0_PORT,BUTTON0,InOut_INPUT);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
 342:	08 95       	ret

00000344 <BUTTON0_Read>:
 }
 Uint8t BUTTON0_Read(void)
 {
	 return DIO_ReadPin_Value(BUTTON0_PORT,BUTTON0);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_ReadPin_Value>
 }
 34c:	08 95       	ret

0000034e <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
}
void LCD_Write_Command(Uint8t command)
{
 34e:	cf 93       	push	r28
 350:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 370:	8b b3       	in	r24, 0x1b	; 27
 372:	9c 2f       	mov	r25, r28
 374:	90 7f       	andi	r25, 0xF0	; 240
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	9f e0       	ldi	r25, 0x0F	; 15
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Write_Command+0x3c>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_Write_Command+0x42>
 390:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 39c:	2b b3       	in	r18, 0x1b	; 27
 39e:	30 e1       	ldi	r19, 0x10	; 16
 3a0:	c3 9f       	mul	r28, r19
 3a2:	c0 01       	movw	r24, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	92 2f       	mov	r25, r18
 3a8:	9f 70       	andi	r25, 0x0F	; 15
 3aa:	89 2b       	or	r24, r25
 3ac:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
 3b8:	8f e9       	ldi	r24, 0x9F	; 159
 3ba:	9f e0       	ldi	r25, 0x0F	; 15
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_Write_Command+0x6e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_Write_Command+0x74>
 3c2:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	9f e1       	ldi	r25, 0x1F	; 31
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_Write_Command+0x84>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_Write_Command+0x8a>
 3d8:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	/*Define direction for command pins*/
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUTPUT);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RW, LCD_OUTPUT);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUTPUT);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	/*Define direction for data pins*/
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN4, LCD_OUTPUT);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN5, LCD_OUTPUT);
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	65 e0       	ldi	r22, 0x05	; 5
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN6, LCD_OUTPUT);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	66 e0       	ldi	r22, 0x06	; 6
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN7, LCD_OUTPUT);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	81 ee       	ldi	r24, 0xE1	; 225
 428:	94 e0       	ldi	r25, 0x04	; 4
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	_delay_ms(100);
	LCD_Write_Command(0x02);
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x33);
 43c:	83 e3       	ldi	r24, 0x33	; 51
 43e:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x32);
 442:	82 e3       	ldi	r24, 0x32	; 50
 444:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x28);
 448:	88 e2       	ldi	r24, 0x28	; 40
 44a:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 44e:	8c e0       	ldi	r24, 0x0C	; 12
 450:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x01);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
	LCD_Write_Command(0x06);
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
 460:	8f e3       	ldi	r24, 0x3F	; 63
 462:	9c e9       	ldi	r25, 0x9C	; 156
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
 46c:	08 95       	ret

0000046e <LCD_Clear>:
	_delay_ms(10);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
 474:	08 95       	ret

00000476 <LCD_Write_Character>:
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_Write_Character(Uint8t character)
{
 476:	cf 93       	push	r28
 478:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 498:	8b b3       	in	r24, 0x1b	; 27
 49a:	9c 2f       	mov	r25, r28
 49c:	90 7f       	andi	r25, 0xF0	; 240
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	89 2b       	or	r24, r25
 4a2:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_Write_Character+0x3c>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_Write_Character+0x42>
 4b8:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	63 e0       	ldi	r22, 0x03	; 3
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 4c4:	2b b3       	in	r18, 0x1b	; 27
 4c6:	30 e1       	ldi	r19, 0x10	; 16
 4c8:	c3 9f       	mul	r28, r19
 4ca:	c0 01       	movw	r24, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	92 2f       	mov	r25, r18
 4d0:	9f 70       	andi	r25, 0x0F	; 15
 4d2:	89 2b       	or	r24, r25
 4d4:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
 4e0:	8f e9       	ldi	r24, 0x9F	; 159
 4e2:	9f e0       	ldi	r25, 0x0F	; 15
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCD_Write_Character+0x6e>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCD_Write_Character+0x74>
 4ea:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPin_Value>
 4f6:	8f e3       	ldi	r24, 0x3F	; 63
 4f8:	9f e1       	ldi	r25, 0x1F	; 31
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_Write_Character+0x84>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_Write_Character+0x8a>
 500:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <LCD_Write_String>:
void LCD_Write_String(Uint8t* str)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 50c:	88 81       	ld	r24, Y
 50e:	88 23       	and	r24, r24
 510:	31 f0       	breq	.+12     	; 0x51e <LCD_Write_String+0x18>
 512:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Character(*str);
 514:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_Write_Character>
	_delay_ms(2);
}
void LCD_Write_String(Uint8t* str)
{
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 518:	89 91       	ld	r24, Y+
 51a:	81 11       	cpse	r24, r1
 51c:	fb cf       	rjmp	.-10     	; 0x514 <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
		str++;
	}
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)
{
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2a 97       	sbiw	r28, 0x0a	; 10
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	ltoa(number, (Uint8t*)num, 10);
 538:	2a e0       	ldi	r18, 0x0A	; 10
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	ae 01       	movw	r20, r28
 53e:	4f 5f       	subi	r20, 0xFF	; 255
 540:	5f 4f       	sbci	r21, 0xFF	; 255
 542:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ltoa>
	LCD_Write_String(num);
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
}
 54e:	2a 96       	adiw	r28, 0x0a	; 10
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <LED0_Initialize>:

void LED0_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED0_PORT, LED0_PIN, LED_OUTPUT);//Define direction
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_SetPin_Direction>
 56a:	08 95       	ret

0000056c <main>:
Uint8t data1 = 0;
Uint16t data2 = 0;
Uint16t data3 =0;
int main(void)
{
    LCD_Init();
 56c:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_Init>
			LCD_Write_String((Uint8t*)"New_Start");
			_delay_ms(1000);
			data =0;
			data1 =0;
			data3 =0;
			state_machine = 5;
 570:	c5 e0       	ldi	r28, 0x05	; 5
			LCD_Write_String((Uint8t*)"Spi transmit");
			if(data!=0)SPI_Transmit(data);
			else if(data1!=0)SPI_Transmit(data1);
			else if(data2!=0)SPI_Transmit(data3);
			_delay_ms(1000);
			state_machine = 9;
 572:	0f 2e       	mov	r0, r31
 574:	f9 e0       	ldi	r31, 0x09	; 9
 576:	bf 2e       	mov	r11, r31
 578:	f0 2d       	mov	r31, r0
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Spi transmit");
			if(data!=0)SPI_Transmit(data);
			else if(data1!=0)SPI_Transmit(data1);
			else if(data2!=0)SPI_Transmit(data3);
 57a:	0f 2e       	mov	r0, r31
 57c:	f2 ef       	ldi	r31, 0xF2	; 242
 57e:	ef 2e       	mov	r14, r31
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	ff 2e       	mov	r15, r31
 584:	f0 2d       	mov	r31, r0
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Spi intialize");
			SPI_Init();
			_delay_ms(1000);
			state_machine = 8;
 586:	68 94       	set
 588:	cc 24       	eor	r12, r12
 58a:	c3 f8       	bld	r12, 3
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Recieving");
			_delay_ms(1000);
			if(data!=0||data1!=0||data3!=0)
			state_machine = 7;
 58c:	0f 2e       	mov	r0, r31
 58e:	f7 e0       	ldi	r31, 0x07	; 7
 590:	af 2e       	mov	r10, r31
 592:	f0 2d       	mov	r31, r0
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Waiting");
			if(BUTTON0_Read()==1){
				while(BUTTON0_Read()==1);
				state_machine = 6;
 594:	0f 2e       	mov	r0, r31
 596:	f6 e0       	ldi	r31, 0x06	; 6
 598:	9f 2e       	mov	r9, r31
 59a:	f0 2d       	mov	r31, r0
				data1 = 1;
 59c:	d1 e0       	ldi	r29, 0x01	; 1
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"HC05_Inialization");
			UART_Init();
			sei();
			state_machine = 4;
 59e:	68 94       	set
 5a0:	dd 24       	eor	r13, r13
 5a2:	d2 f8       	bld	r13, 2
			case 2:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Pot_Inialization");
			ADC_Init(ADC0);
			state_machine = 3;
 5a4:	03 e0       	ldi	r16, 0x03	; 3
			case 1:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
			LCD_Write_Command(0xC0);
			LCD_Write_String((Uint8t*)"Led_intialize");
			LED0_Initialize();
			state_machine = 2;
 5a6:	12 e0       	ldi	r17, 0x02	; 2
int main(void)
{
    LCD_Init();
    while (1) 
    {
		switch(state_machine)
 5a8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <state_machine>
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	8a 30       	cpi	r24, 0x0A	; 10
 5b2:	91 05       	cpc	r25, r1
 5b4:	e0 f7       	brcc	.-8      	; 0x5ae <main+0x42>
 5b6:	e6 5d       	subi	r30, 0xD6	; 214
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__tablejump2__>
		{
			case 0:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 5be:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 5c2:	80 e6       	ldi	r24, 0x60	; 96
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 5ca:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 5d8:	80 ec       	ldi	r24, 0xC0	; 192
 5da:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Welcome");
 5de:	8d e6       	ldi	r24, 0x6D	; 109
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			state_machine =1;
 5e6:	d0 93 f8 00 	sts	0x00F8, r29	; 0x8000f8 <state_machine>
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	83 ed       	ldi	r24, 0xD3	; 211
 5ee:	90 e3       	ldi	r25, 0x30	; 48
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	90 40       	sbci	r25, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x84>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x8e>
 5fa:	00 00       	nop
 5fc:	d5 cf       	rjmp	.-86     	; 0x5a8 <main+0x3c>
			_delay_ms(1000);
			break;
			case 1:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 5fe:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 602:	80 e6       	ldi	r24, 0x60	; 96
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 60a:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 618:	80 ec       	ldi	r24, 0xC0	; 192
 61a:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Led_intialize");
 61e:	85 e7       	ldi	r24, 0x75	; 117
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			LED0_Initialize();
 626:	0e 94 b0 02 	call	0x560	; 0x560 <LED0_Initialize>
			state_machine = 2;
 62a:	10 93 f8 00 	sts	0x00F8, r17	; 0x8000f8 <state_machine>
 62e:	ef ef       	ldi	r30, 0xFF	; 255
 630:	f3 ed       	ldi	r31, 0xD3	; 211
 632:	20 e3       	ldi	r18, 0x30	; 48
 634:	e1 50       	subi	r30, 0x01	; 1
 636:	f0 40       	sbci	r31, 0x00	; 0
 638:	20 40       	sbci	r18, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0xc8>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0xd2>
 63e:	00 00       	nop
 640:	b3 cf       	rjmp	.-154    	; 0x5a8 <main+0x3c>
			_delay_ms(1000);
			break;
			case 2:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 642:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 646:	80 e6       	ldi	r24, 0x60	; 96
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 64e:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Pot_Inialization");
 662:	83 e8       	ldi	r24, 0x83	; 131
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			ADC_Init(ADC0);
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
			state_machine = 3;
 670:	00 93 f8 00 	sts	0x00F8, r16	; 0x8000f8 <state_machine>
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	93 ed       	ldi	r25, 0xD3	; 211
 678:	e0 e3       	ldi	r30, 0x30	; 48
 67a:	81 50       	subi	r24, 0x01	; 1
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e0 40       	sbci	r30, 0x00	; 0
 680:	e1 f7       	brne	.-8      	; 0x67a <main+0x10e>
 682:	00 c0       	rjmp	.+0      	; 0x684 <main+0x118>
 684:	00 00       	nop
 686:	90 cf       	rjmp	.-224    	; 0x5a8 <main+0x3c>
			_delay_ms(1000);
			break;
			case 3:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 688:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 68c:	80 e6       	ldi	r24, 0x60	; 96
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 694:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 6a2:	80 ec       	ldi	r24, 0xC0	; 192
 6a4:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"HC05_Inialization");
 6a8:	84 e9       	ldi	r24, 0x94	; 148
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			UART_Init();
 6b0:	0e 94 c6 04 	call	0x98c	; 0x98c <UART_Init>
			sei();
 6b4:	78 94       	sei
			state_machine = 4;
 6b6:	d0 92 f8 00 	sts	0x00F8, r13	; 0x8000f8 <state_machine>
 6ba:	ff ef       	ldi	r31, 0xFF	; 255
 6bc:	23 ed       	ldi	r18, 0xD3	; 211
 6be:	80 e3       	ldi	r24, 0x30	; 48
 6c0:	f1 50       	subi	r31, 0x01	; 1
 6c2:	20 40       	sbci	r18, 0x00	; 0
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x154>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x15e>
 6ca:	00 00       	nop
 6cc:	6d cf       	rjmp	.-294    	; 0x5a8 <main+0x3c>
			_delay_ms(1000);
			break;
			case 4:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 6ce:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 6d2:	80 e6       	ldi	r24, 0x60	; 96
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 6da:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 6e8:	80 ec       	ldi	r24, 0xC0	; 192
 6ea:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Button_Inialization");
 6ee:	86 ea       	ldi	r24, 0xA6	; 166
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			BUTTON0_Initialize();
 6f6:	0e 94 9c 01 	call	0x338	; 0x338 <BUTTON0_Initialize>
			state_machine = 5;
 6fa:	c0 93 f8 00 	sts	0x00F8, r28	; 0x8000f8 <state_machine>
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	e3 ed       	ldi	r30, 0xD3	; 211
 702:	f0 e3       	ldi	r31, 0x30	; 48
 704:	91 50       	subi	r25, 0x01	; 1
 706:	e0 40       	sbci	r30, 0x00	; 0
 708:	f0 40       	sbci	r31, 0x00	; 0
 70a:	e1 f7       	brne	.-8      	; 0x704 <main+0x198>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x1a2>
 70e:	00 00       	nop
 710:	4b cf       	rjmp	.-362    	; 0x5a8 <main+0x3c>
			_delay_ms(1000);
			break;
			case 5:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 712:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 716:	80 e6       	ldi	r24, 0x60	; 96
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 71e:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 72c:	80 ec       	ldi	r24, 0xC0	; 192
 72e:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Waiting");
 732:	8a eb       	ldi	r24, 0xBA	; 186
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			if(BUTTON0_Read()==1){
 73a:	0e 94 a2 01 	call	0x344	; 0x344 <BUTTON0_Read>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	49 f4       	brne	.+18     	; 0x754 <main+0x1e8>
				while(BUTTON0_Read()==1);
 742:	0e 94 a2 01 	call	0x344	; 0x344 <BUTTON0_Read>
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	e1 f3       	breq	.-8      	; 0x742 <main+0x1d6>
				state_machine = 6;
 74a:	90 92 f8 00 	sts	0x00F8, r9	; 0x8000f8 <state_machine>
				data1 = 1;
 74e:	d0 93 f6 00 	sts	0x00F6, r29	; 0x8000f6 <data1>
 752:	0f c0       	rjmp	.+30     	; 0x772 <main+0x206>
			}
			
			else if(data!=0){
 754:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <data>
 758:	88 23       	and	r24, r24
 75a:	19 f0       	breq	.+6      	; 0x762 <main+0x1f6>
				state_machine =6;
 75c:	90 92 f8 00 	sts	0x00F8, r9	; 0x8000f8 <state_machine>
 760:	08 c0       	rjmp	.+16     	; 0x772 <main+0x206>
			}
			else if(data3!=0){
 762:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__data_end>
 766:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__data_end+0x1>
 76a:	89 2b       	or	r24, r25
 76c:	11 f0       	breq	.+4      	; 0x772 <main+0x206>
				state_machine =6;
 76e:	90 92 f8 00 	sts	0x00F8, r9	; 0x8000f8 <state_machine>
 772:	2f ef       	ldi	r18, 0xFF	; 255
 774:	80 e7       	ldi	r24, 0x70	; 112
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	21 50       	subi	r18, 0x01	; 1
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x20c>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x216>
 782:	00 00       	nop
 784:	11 cf       	rjmp	.-478    	; 0x5a8 <main+0x3c>
			}
			 _delay_ms(50);
			break;
			case 6:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 786:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 78a:	80 e6       	ldi	r24, 0x60	; 96
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 792:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 7a0:	80 ec       	ldi	r24, 0xC0	; 192
 7a2:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Recieving");
 7a6:	82 ec       	ldi	r24, 0xC2	; 194
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 7ae:	ef ef       	ldi	r30, 0xFF	; 255
 7b0:	f3 ed       	ldi	r31, 0xD3	; 211
 7b2:	20 e3       	ldi	r18, 0x30	; 48
 7b4:	e1 50       	subi	r30, 0x01	; 1
 7b6:	f0 40       	sbci	r31, 0x00	; 0
 7b8:	20 40       	sbci	r18, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <main+0x248>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x252>
 7be:	00 00       	nop
			_delay_ms(1000);
			if(data!=0||data1!=0||data3!=0)
 7c0:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <data>
 7c4:	81 11       	cpse	r24, r1
 7c6:	0b c0       	rjmp	.+22     	; 0x7de <main+0x272>
 7c8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <data1>
 7cc:	81 11       	cpse	r24, r1
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <main+0x272>
 7d0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__data_end>
 7d4:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__data_end+0x1>
 7d8:	89 2b       	or	r24, r25
 7da:	09 f4       	brne	.+2      	; 0x7de <main+0x272>
 7dc:	e5 ce       	rjmp	.-566    	; 0x5a8 <main+0x3c>
			state_machine = 7;
 7de:	a0 92 f8 00 	sts	0x00F8, r10	; 0x8000f8 <state_machine>
 7e2:	e2 ce       	rjmp	.-572    	; 0x5a8 <main+0x3c>
			break;
			case 7:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 7e4:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 7e8:	80 e6       	ldi	r24, 0x60	; 96
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 7f0:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 7fe:	80 ec       	ldi	r24, 0xC0	; 192
 800:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi intialize");
 804:	8c ec       	ldi	r24, 0xCC	; 204
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			SPI_Init();
 80c:	0e 94 ba 04 	call	0x974	; 0x974 <SPI_Init>
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	93 ed       	ldi	r25, 0xD3	; 211
 814:	e0 e3       	ldi	r30, 0x30	; 48
 816:	81 50       	subi	r24, 0x01	; 1
 818:	90 40       	sbci	r25, 0x00	; 0
 81a:	e0 40       	sbci	r30, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <main+0x2aa>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <main+0x2b4>
 820:	00 00       	nop
			_delay_ms(1000);
			state_machine = 8;
 822:	c0 92 f8 00 	sts	0x00F8, r12	; 0x8000f8 <state_machine>
			break;
 826:	c0 ce       	rjmp	.-640    	; 0x5a8 <main+0x3c>
			case 8:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 828:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 82c:	80 e6       	ldi	r24, 0x60	; 96
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 834:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 842:	80 ec       	ldi	r24, 0xC0	; 192
 844:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi transmit");
 848:	8a ed       	ldi	r24, 0xDA	; 218
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
			if(data!=0)SPI_Transmit(data);
 850:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <data>
 854:	88 23       	and	r24, r24
 856:	19 f0       	breq	.+6      	; 0x85e <main+0x2f2>
 858:	0e 94 c2 04 	call	0x984	; 0x984 <SPI_Transmit>
 85c:	11 c0       	rjmp	.+34     	; 0x880 <__stack+0x21>
			else if(data1!=0)SPI_Transmit(data1);
 85e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <data1>
 862:	88 23       	and	r24, r24
 864:	19 f0       	breq	.+6      	; 0x86c <__stack+0xd>
 866:	0e 94 c2 04 	call	0x984	; 0x984 <SPI_Transmit>
 86a:	0a c0       	rjmp	.+20     	; 0x880 <__stack+0x21>
			else if(data2!=0)SPI_Transmit(data3);
 86c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <data2>
 870:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <data2+0x1>
 874:	89 2b       	or	r24, r25
 876:	21 f0       	breq	.+8      	; 0x880 <__stack+0x21>
 878:	f7 01       	movw	r30, r14
 87a:	80 81       	ld	r24, Z
 87c:	0e 94 c2 04 	call	0x984	; 0x984 <SPI_Transmit>
 880:	ff ef       	ldi	r31, 0xFF	; 255
 882:	23 ed       	ldi	r18, 0xD3	; 211
 884:	80 e3       	ldi	r24, 0x30	; 48
 886:	f1 50       	subi	r31, 0x01	; 1
 888:	20 40       	sbci	r18, 0x00	; 0
 88a:	80 40       	sbci	r24, 0x00	; 0
 88c:	e1 f7       	brne	.-8      	; 0x886 <__stack+0x27>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
			_delay_ms(1000);
			state_machine = 9;
 892:	b0 92 f8 00 	sts	0x00F8, r11	; 0x8000f8 <state_machine>
			break;
 896:	88 ce       	rjmp	.-752    	; 0x5a8 <main+0x3c>
			case 9:
			LCD_Clear();LCD_Write_String((Uint8t*)"StateMachine");LCD_Write_Number(state_machine);
 898:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_Clear>
 89c:	80 e6       	ldi	r24, 0x60	; 96
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 8a4:	60 91 f8 00 	lds	r22, 0x00F8	; 0x8000f8 <state_machine>
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 92 02 	call	0x524	; 0x524 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 8b2:	80 ec       	ldi	r24, 0xC0	; 192
 8b4:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"New_Start");
 8b8:	87 ee       	ldi	r24, 0xE7	; 231
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Write_String>
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	e3 ed       	ldi	r30, 0xD3	; 211
 8c4:	f0 e3       	ldi	r31, 0x30	; 48
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	e0 40       	sbci	r30, 0x00	; 0
 8ca:	f0 40       	sbci	r31, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
 8d0:	00 00       	nop
			_delay_ms(1000);
			data =0;
 8d2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <data>
			data1 =0;
 8d6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <data1>
			data3 =0;
 8da:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__data_end+0x1>
 8de:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__data_end>
			state_machine = 5;
 8e2:	c0 93 f8 00 	sts	0x00F8, r28	; 0x8000f8 <state_machine>
			break;
 8e6:	60 ce       	rjmp	.-832    	; 0x5a8 <main+0x3c>

000008e8 <__vector_13>:
		}
    }
	
}
ISR(USART_RXC_vect){
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	8f 93       	push	r24
	data = UDR;
 8f4:	8c b1       	in	r24, 0x0c	; 12
 8f6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <data>
}
 8fa:	8f 91       	pop	r24
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <__vector_16>:
ISR(ADC_vect){
 906:	1f 92       	push	r1
 908:	0f 92       	push	r0
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	0f 92       	push	r0
 90e:	11 24       	eor	r1, r1
 910:	2f 93       	push	r18
 912:	3f 93       	push	r19
 914:	4f 93       	push	r20
 916:	5f 93       	push	r21
 918:	6f 93       	push	r22
 91a:	7f 93       	push	r23
 91c:	8f 93       	push	r24
 91e:	9f 93       	push	r25
 920:	af 93       	push	r26
 922:	bf 93       	push	r27
 924:	ef 93       	push	r30
 926:	ff 93       	push	r31
	data2 = ADC_Read();
 928:	0e 94 88 00 	call	0x110	; 0x110 <ADC_Read>
 92c:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <data2+0x1>
 930:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <data2>
	data3 = ((data2*5)/1024);
 934:	9c 01       	movw	r18, r24
 936:	22 0f       	add	r18, r18
 938:	33 1f       	adc	r19, r19
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	82 0f       	add	r24, r18
 940:	93 1f       	adc	r25, r19
 942:	89 2f       	mov	r24, r25
 944:	86 95       	lsr	r24
 946:	86 95       	lsr	r24
 948:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__data_end>
 94c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__data_end+0x1>
	SET_BIT(ADCSRA,ADSC);
 950:	36 9a       	sbi	0x06, 6	; 6
}
 952:	ff 91       	pop	r31
 954:	ef 91       	pop	r30
 956:	bf 91       	pop	r27
 958:	af 91       	pop	r26
 95a:	9f 91       	pop	r25
 95c:	8f 91       	pop	r24
 95e:	7f 91       	pop	r23
 960:	6f 91       	pop	r22
 962:	5f 91       	pop	r21
 964:	4f 91       	pop	r20
 966:	3f 91       	pop	r19
 968:	2f 91       	pop	r18
 96a:	0f 90       	pop	r0
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	0f 90       	pop	r0
 970:	1f 90       	pop	r1
 972:	18 95       	reti

00000974 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
 974:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
 976:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
 978:	bf 9a       	sbi	0x17, 7	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
 97a:	bc 9a       	sbi	0x17, 4	; 23
	CLR_BIT(SPSR, SPI2X);
 97c:	70 98       	cbi	0x0e, 0	; 14
	//SET_BIT(SPCR, SPR1);SET_BIT(SPCR, SPR0);
	SPCR = 0x53;//0b 0101 0011
 97e:	83 e5       	ldi	r24, 0x53	; 83
 980:	8d b9       	out	0x0d, r24	; 13
 982:	08 95       	ret

00000984 <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
 984:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 986:	77 9b       	sbis	0x0e, 7	; 14
 988:	fe cf       	rjmp	.-4      	; 0x986 <SPI_Transmit+0x2>
}
 98a:	08 95       	ret

0000098c <UART_Init>:

void UART_Init(void)
{
	
	/*Define Direction of Tx*/
	SET_BIT(DDRD, PD1);
 98c:	89 9a       	sbi	0x11, 1	; 17
	/*Define Direction of Rx*/
	CLR_BIT(DDRD, PD0);
 98e:	88 98       	cbi	0x11, 0	; 17
	/*Baud rate value variable*/
	Uint16t UBRR_Val = 0;
	/*Enable Transmitter and Receiver bits*/
	UCSRB = (1 << RXEN) | (1 << TXEN)| (1<<RXCIE);
 990:	88 e9       	ldi	r24, 0x98	; 152
 992:	8a b9       	out	0x0a, r24	; 10
	/*Full configuration for UART*/
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 994:	86 e8       	ldi	r24, 0x86	; 134
 996:	80 bd       	out	0x20, r24	; 32
	/*Baud Rate Calculations*/
	UBRR_Val = (((FRQ) / (16 * BAUDRATE)) - 1);// 11110101 00111001
	UBRRL = UBRR_Val;//00111001
 998:	87 e6       	ldi	r24, 0x67	; 103
 99a:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Val >> 8;//11110101
 99c:	10 bc       	out	0x20, r1	; 32
 99e:	08 95       	ret

000009a0 <__tablejump2__>:
 9a0:	ee 0f       	add	r30, r30
 9a2:	ff 1f       	adc	r31, r31
 9a4:	05 90       	lpm	r0, Z+
 9a6:	f4 91       	lpm	r31, Z
 9a8:	e0 2d       	mov	r30, r0
 9aa:	09 94       	ijmp

000009ac <ltoa>:
 9ac:	25 32       	cpi	r18, 0x25	; 37
 9ae:	31 05       	cpc	r19, r1
 9b0:	20 f4       	brcc	.+8      	; 0x9ba <ltoa+0xe>
 9b2:	22 30       	cpi	r18, 0x02	; 2
 9b4:	10 f0       	brcs	.+4      	; 0x9ba <ltoa+0xe>
 9b6:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__ltoa_ncheck>
 9ba:	fa 01       	movw	r30, r20
 9bc:	10 82       	st	Z, r1
 9be:	ca 01       	movw	r24, r20
 9c0:	08 95       	ret

000009c2 <__ltoa_ncheck>:
 9c2:	bb 27       	eor	r27, r27
 9c4:	2a 30       	cpi	r18, 0x0A	; 10
 9c6:	51 f4       	brne	.+20     	; 0x9dc <__ltoa_ncheck+0x1a>
 9c8:	99 23       	and	r25, r25
 9ca:	42 f4       	brpl	.+16     	; 0x9dc <__ltoa_ncheck+0x1a>
 9cc:	bd e2       	ldi	r27, 0x2D	; 45
 9ce:	90 95       	com	r25
 9d0:	80 95       	com	r24
 9d2:	70 95       	com	r23
 9d4:	61 95       	neg	r22
 9d6:	7f 4f       	sbci	r23, 0xFF	; 255
 9d8:	8f 4f       	sbci	r24, 0xFF	; 255
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__ultoa_common>

000009e0 <__ultoa_ncheck>:
 9e0:	bb 27       	eor	r27, r27

000009e2 <__ultoa_common>:
 9e2:	fa 01       	movw	r30, r20
 9e4:	a6 2f       	mov	r26, r22
 9e6:	62 17       	cp	r22, r18
 9e8:	71 05       	cpc	r23, r1
 9ea:	81 05       	cpc	r24, r1
 9ec:	91 05       	cpc	r25, r1
 9ee:	33 0b       	sbc	r19, r19
 9f0:	30 fb       	bst	r19, 0
 9f2:	66 f0       	brts	.+24     	; 0xa0c <__ultoa_common+0x2a>
 9f4:	aa 27       	eor	r26, r26
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	aa 1f       	adc	r26, r26
 a00:	a2 17       	cp	r26, r18
 a02:	10 f0       	brcs	.+4      	; 0xa08 <__ultoa_common+0x26>
 a04:	a2 1b       	sub	r26, r18
 a06:	63 95       	inc	r22
 a08:	38 50       	subi	r19, 0x08	; 8
 a0a:	a9 f7       	brne	.-22     	; 0x9f6 <__ultoa_common+0x14>
 a0c:	a0 5d       	subi	r26, 0xD0	; 208
 a0e:	aa 33       	cpi	r26, 0x3A	; 58
 a10:	08 f0       	brcs	.+2      	; 0xa14 <__ultoa_common+0x32>
 a12:	a9 5d       	subi	r26, 0xD9	; 217
 a14:	a1 93       	st	Z+, r26
 a16:	36 f7       	brtc	.-52     	; 0x9e4 <__ultoa_common+0x2>
 a18:	b1 11       	cpse	r27, r1
 a1a:	b1 93       	st	Z+, r27
 a1c:	10 82       	st	Z, r1
 a1e:	ca 01       	movw	r24, r20
 a20:	0c 94 12 05 	jmp	0xa24	; 0xa24 <strrev>

00000a24 <strrev>:
 a24:	dc 01       	movw	r26, r24
 a26:	fc 01       	movw	r30, r24
 a28:	67 2f       	mov	r22, r23
 a2a:	71 91       	ld	r23, Z+
 a2c:	77 23       	and	r23, r23
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <strrev+0x4>
 a30:	32 97       	sbiw	r30, 0x02	; 2
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <strrev+0x18>
 a34:	7c 91       	ld	r23, X
 a36:	6d 93       	st	X+, r22
 a38:	70 83       	st	Z, r23
 a3a:	62 91       	ld	r22, -Z
 a3c:	ae 17       	cp	r26, r30
 a3e:	bf 07       	cpc	r27, r31
 a40:	c8 f3       	brcs	.-14     	; 0xa34 <strrev+0x10>
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
